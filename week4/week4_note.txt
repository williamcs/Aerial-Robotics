question2:
R_des_a = [0.6124 -0.7071 -0.5; 0.6124 0.7071 0.3536; -0.5 0 0.866];
R_des_b = [0.1464 -0.5 -0.1464; 0.1464 0.5 0.1464; -0.5 0.7071 0.5];
R_des_c = [0.0810 -0.8509 0.988; 0.1313 0.5253 -0.8407; 0.988 0 0.1543];
  R_des_d = [0.7071 -0.6124 0.3536; 0.7071 0.6124 -0.3536; 0 0.5 0.866];
  R_des_e = [-0.5 0 0.866; 0.866 0 0.5; 0 1 0];
R_des_f = [0.866 0 -0.3536; -0.3536 0.7071 -0.6124; -0.3536 0.7071 0.6124];



question3:
R= [0.724 0.1294 0.6771; 0.6424 -0.483 -0.595; 0.25 -.866 -0.433];
R_des = [0 0 1; 1 0 0; 0 1 0];


https://www.coursera.org/learn/robotics-flight/module/XoPE0/discussions/HzEcAb4-EeWXjwr0-3YODw
https://www.coursera.org/learn/robotics-flight/discussions/8Z_7nsHQEeWqYApk6o1_2Q/replies/qQs3f8K9EeWb3QofSqIPlQ
https://www.coursera.org/learn/robotics-flight/module/XoPE0/discussions/qxs8I8WBEeWjNw6BzriyBQ

https://www.coursera.org/learn/robotics-flight/module/XoPE0/discussions/SsVekMFjEeWXhA6W5IbXRQ   using des_state.pos x and y in 3D pd controller

https://www.coursera.org/learn/robotics-flight/discussions/G1OQKcVoEeWqYApk6o1_2Q  controller related comment

https://www.coursera.org/learn/robotics-flight/discussions/P3Ulusp-EeWpVQq-SmAm8Q/replies/FQ6HNsqGEeWSwxLiSK1pzQ   Nichols and Manual Tuning in Practice

https://www.coursera.org/learn/robotics-flight/module/XoPE0/discussions/HzEcAb4-EeWXjwr0-3YODw   Trajectory Generation 
https://www.coursera.org/learn/robotics-flight/module/XoPE0/discussions/EVf7icTIEeWB_BLnpYI0Bw  Trajectory Generation - Frustrated


[((kpphi*(phides-state.rot(1,:)))+kdphi*(-state.omega(1,:))); ((kptheta*(thetades-state.rot(2,:)))+(kdtheta(-state.omega(2,:)))); ((kppsi*(des_state.yaw-state.rot(3,:)))+(kdpsi(des_state.yaw_dot-state.omega(3,:))))];


waypoints = [0    0   0;
             1    1   1;
             2    0   2;
             3    -1  1;
             4    0   0]';
			 
			 

			 
des_phi = 1/params.gravity*(des_state.acc(1,:)*sin(des_state.yaw) - des_state.acc(2,:)*cos(des_state.yaw));

des_theta = 1/params.gravity*(des_state.acc(1,:)*cos(des_state.yaw) - des_state.acc(2,:)*sin(des_state.yaw));

% Thurst

F = params.gravity*params.mass - params.mass*(Kd*state.vel(3,:) + Kp*(state.pos(3,:) - des_state.pos(3,:)));

% Moment

u1 = Kpph*(des_phi - state.rot(1,:))+Kdph*(0 - state.omega(1,:));

u2 = Kpth*(des_theta -state.rot(2,:))+Kdth*(0-state.omega(2,:));

u3 = Kpps*(des_state.yaw - state.rot(3,:))+Kdps*(des_state.yawdot - state.omega(3,:));

M = [u1;u2;u3];












function [F, M] = controller(t, state, des_state, params)
%CONTROLLER  Controller for the quadrotor
%
%   state: The current state of the robot with the following fields:
%   state.pos = [x; y; z], state.vel = [x_dot; y_dot; z_dot],
%   state.rot = [phi; theta; psi], state.omega = [p; q; r]
%
%   des_state: The desired states are:
%   des_state.pos = [x; y; z], des_state.vel = [x_dot; y_dot; z_dot],
%   des_state.acc = [x_ddot; y_ddot; z_ddot], des_state.yaw,
%   des_state.yaw_dot  --des_state.yawdot
%
%   params: robot parameters

%   Using these current and desired states, you have to compute the desired
%   controls


% =================== Your code goes here ===================

% Thurst
F = 0;
%F = params.mass*(params.gravity + des_state.acc(3));
%F = params.mass*des_state.acc(3);
kpz = 100;
kdz = 10;
%F = params.mass*(params.gravity + (kdz*des_state.vel(3) + kpz*(des_state.pos(3)-state.pos(3))));
%F = params.mass*(params.gravity - kdz*state.vel(3) + kpz*(des_state.pos(3)-state.pos(3)));

r3_acc_des = des_state.acc(3) + kdz*(des_state.vel(3) - state.vel(3)) + kpz*(des_state.pos(3) - state.pos(3));
F = params.mass*(params.gravity + r3_acc_des);

% Moment
M = zeros(3,1);

kpx = 100;
kdx = 10;
r1_acc_des = des_state.acc(1) + kdx*(des_state.vel(1) - state.vel(1)) + kpx*(des_state.pos(1) - state.pos(1));

kpy = 100;
kdy = 10;
r2_acc_des = des_state.acc(2) + kdy*(des_state.vel(2) - state.vel(2)) + kpy*(des_state.pos(2) - state.pos(2));

%phi_des = 1/params.gravity*(des_state.acc(1)*sin(state.rot(3)) - des_state.acc(2)*cos(state.rot(3)));
%theta_des = 1/params.gravity*(des_state.acc(1)*cos(state.rot(3)) + des_state.acc(2)*sin(state.rot(3)));

phi_des = 1/params.gravity*(r1_acc_des*sin(des_state.yaw) - r2_acc_des*cos(des_state.yaw));
theta_des = 1/params.gravity*(r1_acc_des*cos(des_state.yaw) + r2_acc_des*sin(des_state.yaw));

kpphi = 0.0203; %0.0203; %0.9; %2;%2;%1;
kdphi = 0.0045; %0.05; %2; %5; %3;%4;
u_phi = kpphi*(phi_des -state.rot(1)) + kdphi*(0-state.omega(1));

kptheta = 0.0203; %0.0203; %0.9; %2; %2;%1;
kdtheta = 0.0045; %0.05; %2; %5; %3;%4;
u_theta = kptheta*(theta_des-state.rot(2)) + kdtheta*(0-state.omega(2));

kppsi = 10;%13; %15;
kdpsi = 2; %2;
%u_psi = kppsi*(0) + kdpsi*(des_state.yawdot-state.omega(3));
u_psi = kppsi*(des_state.yaw-state.rot(3)) + kdpsi*(des_state.yawdot-state.omega(3));

M = [u_phi; u_theta; u_psi];
%M = [50; 50; 50];

% =================== Your code ends here ===================

end




function [ desired_state ] = traj_generator(t, state, waypoints)
% TRAJ_GENERATOR: Generate the trajectory passing through all
% positions listed in the waypoints list
%
% NOTE: This function would be called with variable number of input arguments.
% During initialization, it will be called with arguments
% trajectory_generator([], [], waypoints) and later, while testing, it will be
% called with only t and state as arguments, so your code should be able to
% handle that. This can be done by checking the number of arguments to the
% function using the "nargin" variable, check the MATLAB documentation for more
% information.
%
% t,state: time and current state (same variable as "state" in controller)
% that you may use for computing desired_state
%
% waypoints: The 3xP matrix listing all the points you much visited in order
% along the generated trajectory
%
% desired_state: Contains all the information that is passed to the
% controller for generating inputs for the quadrotor
%
% It is suggested to use "persistent" variables to store the waypoints during
% the initialization call of trajectory_generator.


%% Example code:
% Note that this is an example of naive trajectory generator that simply moves
% the quadrotor along a stright line between each pair of consecutive waypoints
% using a constant velocity of 0.5 m/s. Note that this is only a sample, and you
% should write your own trajectory generator for the submission.

persistent waypoints0 traj_time d0
if nargin > 2
    d = waypoints(:,2:end) - waypoints(:,1:end-1);
    d0 = 2 * sqrt(d(1,:).^2 + d(2,:).^2 + d(3,:).^2);
    traj_time = [0, cumsum(d0)];
    waypoints0 = waypoints;
else
    if(t > traj_time(end))
        t = traj_time(end);
    end
    t_index = find(traj_time >= t,1);

    if(t_index > 1)
        t = t - traj_time(t_index-1);
    end
    if(t == 0)
        desired_state.pos = waypoints0(:,1);
    else
        scale = t/d0(t_index-1);
        desired_state.pos = (1 - scale) * waypoints0(:,t_index-1) + scale * waypoints0(:,t_index);
    end
    desired_state.vel = zeros(3,1);
    desired_state.acc = zeros(3,1);
    desired_state.yaw = 0;
    desired_state.yawdot = 0;
end
%


%% Fill in your code here

% desired_state.pos = zeros(3,1);
% desired_state.vel = zeros(3,1);
% desired_state.acc = zeros(3,1);
% desired_state.yaw = 0;
end


